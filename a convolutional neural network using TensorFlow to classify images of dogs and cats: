y_test[(y_test == 3) | (y_test == 5)]

one-hot encode the labels
y_train = tf.keras.utils.to_categorical(y_train - 3, num_classes=2)
y_test = tf.keras.utils.to_categorical(y_test - 3, num_classes=2)

create the model
model = tf.keras.models.Sequential()

add a convolutional layer
model.add(tf.keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))

add a pooling layer
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

add a dropout layer
model.add(tf.keras.layers.Dropout(0.25))

add a flatten layer
model.add(tf.keras.layers.Flatten())

add a dense layer
model.add(tf.keras.layers.Dense(128, activation='relu'))

add another dropout layer
model.add(tf.keras.layers.Dropout(0.5))

add a final dense layer with a sigmoid activation function
model.add(tf.keras.layers.Dense(2, activation='sigmoid'))

compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

fit the model to the training data
model.fit(x_train, y_train, batch_size=64, epochs=10, validation_data=(x_test, y_test))


import tensorflow as tf

# load the data
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# select only the cat and dog classes
x_train = x_train[(y_train == 3) | (y_train == 5)]
y_train = y_train[(y_train == 3) | (y_train == 5)]
x_test = x_test[(y_test == 3) | (y_test == 5)]
y_test = y_test[(y_test == 3) | (y_test == 5)]

# one-hot encode the labels
y_train = tf.keras.utils.to_categorical(y_train - 3, num_classes=2)
y_test = tf.keras.utils.to_categorical(y_test - 3, num_classes=2)

# create the model
model = tf.keras.models.Sequential()

# add a convolutional layer
model.add(tf.keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))

# add a pooling layer
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

# add a dropout layer
model.add(tf.keras.layers.Dropout(0.25))

# add a flatten layer
model.add(tf.keras.layers.Flatten())

# add a dense layer
model.
